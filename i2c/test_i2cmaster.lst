   1               		.file	"test_i2cmaster.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 102               		.section	.text.startup,"ax",@progbits
 104               	.global	main
 106               	main:
 107               		.stabd	46,0,0
   1:test_i2cmaster.c **** /****************************************************************************
   2:test_i2cmaster.c **** Title:    Access serial EEPROM 24C02 using I2C interace
   3:test_i2cmaster.c **** Author:   Peter Fleury <pfleury@gmx.ch> http://jump.to/fleury
   4:test_i2cmaster.c **** File:     $Id: test_i2cmaster.c,v 1.2 2003/12/06 17:07:18 peter Exp $
   5:test_i2cmaster.c **** Software: AVR-GCC 3.3
   6:test_i2cmaster.c **** Hardware: AT90S8515 at 4 Mhz, any AVR device can be used
   7:test_i2cmaster.c **** 
   8:test_i2cmaster.c **** Description:
   9:test_i2cmaster.c ****     This example shows how the I2C library i2cmaster.S can be used to 
  10:test_i2cmaster.c ****     access a serial eeprom.
  11:test_i2cmaster.c ****     Based on Atmel Application Note AVR300, adapted to AVR-GCC C interface
  12:test_i2cmaster.c **** 
  13:test_i2cmaster.c **** *****************************************************************************/
  14:test_i2cmaster.c **** #include <avr/io.h>
  15:test_i2cmaster.c **** #include "i2cmaster.h"
  16:test_i2cmaster.c **** 
  17:test_i2cmaster.c **** 
  18:test_i2cmaster.c **** #define Dev24C02  0xA2      // device address of EEPROM 24C02, see datasheet
  19:test_i2cmaster.c **** 
  20:test_i2cmaster.c **** 
  21:test_i2cmaster.c **** int main(void)
  22:test_i2cmaster.c **** {
 109               	.LM0:
 110               	.LFBB1:
 111 0000 CF93      		push r28
 112 0002 DF93      		push r29
 113 0004 1F92      		push __zero_reg__
 114 0006 CDB7      		in r28,__SP_L__
 115 0008 DEB7      		in r29,__SP_H__
 116               	/* prologue: function */
 117               	/* frame size = 1 */
 118               	/* stack size = 3 */
 119               	.L__stack_usage = 3
  23:test_i2cmaster.c ****     unsigned char ret;
  24:test_i2cmaster.c ****     
  25:test_i2cmaster.c **** 
  26:test_i2cmaster.c ****     DDRB  = 0xff;                              // use all pins on port B for output 
 121               	.LM1:
 122 000a 8FEF      		ldi r24,lo8(-1)
 123 000c 87BB      		out 0x17,r24
  27:test_i2cmaster.c ****     PORTB = 0xff;                              // (active low LED's )
 125               	.LM2:
 126 000e 88BB      		out 0x18,r24
  28:test_i2cmaster.c **** 
  29:test_i2cmaster.c ****     i2c_init();                                // init I2C interface
 128               	.LM3:
 129 0010 00D0      		rcall i2c_init
  30:test_i2cmaster.c **** 
  31:test_i2cmaster.c ****     /* write 0x75 to eeprom address 0x05 (Byte Write) */
  32:test_i2cmaster.c ****     ret = i2c_start(Dev24C02+I2C_WRITE);       // set device address and write mode
 131               	.LM4:
 132 0012 82EA      		ldi r24,lo8(-94)
 133 0014 00D0      		rcall i2c_start
  33:test_i2cmaster.c ****     if ( ret ) {
 135               	.LM5:
 136 0016 8823      		tst r24
 137 0018 01F0      		breq .L2
  34:test_i2cmaster.c ****         /* failed to issue start condition, possibly no device found */
  35:test_i2cmaster.c ****         i2c_stop();
 139               	.LM6:
 140 001a 00D0      		rcall i2c_stop
  36:test_i2cmaster.c ****         PORTB=0x00;                            // activate all 8 LED to show error */
 142               	.LM7:
 143 001c 18BA      		out 0x18,__zero_reg__
 144               	.L4:
 145               	.L5:
 146 001e 00C0      		rjmp .L5
 147               	.L2:
  37:test_i2cmaster.c ****     }else {
  38:test_i2cmaster.c ****         /* issuing start condition ok, device accessible */
  39:test_i2cmaster.c ****         i2c_write(0x05);                       // write address = 5
 149               	.LM8:
 150 0020 85E0      		ldi r24,lo8(5)
 151 0022 00D0      		rcall i2c_write
  40:test_i2cmaster.c ****         i2c_write(0x75);                       // ret=0 -> Ok, ret=1 -> no ACK 
 153               	.LM9:
 154 0024 85E7      		ldi r24,lo8(117)
 155 0026 00D0      		rcall i2c_write
  41:test_i2cmaster.c ****         i2c_stop();                            // set stop conditon = release bus
 157               	.LM10:
 158 0028 00D0      		rcall i2c_stop
  42:test_i2cmaster.c **** 
  43:test_i2cmaster.c ****         /* write ok, read value back from eeprom address 0x05, wait until 
  44:test_i2cmaster.c ****            the device is no longer busy from the previous write operation */
  45:test_i2cmaster.c ****         i2c_start_wait(Dev24C02+I2C_WRITE);     // set device address and write mode
 160               	.LM11:
 161 002a 82EA      		ldi r24,lo8(-94)
 162 002c 00D0      		rcall i2c_start_wait
  46:test_i2cmaster.c ****         i2c_write(0x05);                        // write address = 5
 164               	.LM12:
 165 002e 85E0      		ldi r24,lo8(5)
 166 0030 00D0      		rcall i2c_write
  47:test_i2cmaster.c ****         i2c_rep_start(Dev24C02+I2C_READ);       // set device address and read mode
 168               	.LM13:
 169 0032 83EA      		ldi r24,lo8(-93)
 170 0034 00D0      		rcall i2c_rep_start
  48:test_i2cmaster.c ****         ret = i2c_readNak();                    // read one byte
 172               	.LM14:
 173 0036 00D0      		rcall i2c_readNak
  49:test_i2cmaster.c ****         i2c_stop();
 175               	.LM15:
 176 0038 8983      		std Y+1,r24
 177 003a 00D0      		rcall i2c_stop
  50:test_i2cmaster.c ****         
  51:test_i2cmaster.c ****         PORTB = ~ret;                           // output byte on the LED's
 179               	.LM16:
 180 003c 8981      		ldd r24,Y+1
 181 003e 8095      		com r24
 182 0040 88BB      		out 0x18,r24
  52:test_i2cmaster.c **** 
  53:test_i2cmaster.c ****         /* write 0x70,0x71,072,073 to eeprom address 0x00..0x03 (Page Write),
  54:test_i2cmaster.c ****            wait until the device is no longer busy from the previous write operation */
  55:test_i2cmaster.c ****         i2c_start_wait(Dev24C02+I2C_WRITE);     // set device address and write mode
 184               	.LM17:
 185 0042 82EA      		ldi r24,lo8(-94)
 186 0044 00D0      		rcall i2c_start_wait
  56:test_i2cmaster.c ****         i2c_write(0x00);                        // write start address = 0
 188               	.LM18:
 189 0046 80E0      		ldi r24,0
 190 0048 00D0      		rcall i2c_write
  57:test_i2cmaster.c ****         i2c_write(0x70);                        // write data to address 0
 192               	.LM19:
 193 004a 80E7      		ldi r24,lo8(112)
 194 004c 00D0      		rcall i2c_write
  58:test_i2cmaster.c ****         i2c_write(0x71);                        //    "    "   "    "    1
 196               	.LM20:
 197 004e 81E7      		ldi r24,lo8(113)
 198 0050 00D0      		rcall i2c_write
  59:test_i2cmaster.c ****         i2c_write(0x72);                        //    "    "   "    "    2
 200               	.LM21:
 201 0052 82E7      		ldi r24,lo8(114)
 202 0054 00D0      		rcall i2c_write
  60:test_i2cmaster.c ****         i2c_write(0x74);                        //    "    "   "    "    3
 204               	.LM22:
 205 0056 84E7      		ldi r24,lo8(116)
 206 0058 00D0      		rcall i2c_write
  61:test_i2cmaster.c ****         i2c_stop();                             // set stop conditon = release bus
 208               	.LM23:
 209 005a 00D0      		rcall i2c_stop
  62:test_i2cmaster.c ****     
  63:test_i2cmaster.c ****         /* write ok, read value back from eeprom address 0..3 (Sequencial Read),
  64:test_i2cmaster.c ****            wait until the device is no longer busy from the previous write operation */
  65:test_i2cmaster.c ****         i2c_start_wait(Dev24C02+I2C_WRITE);      // set device address and write mode
 211               	.LM24:
 212 005c 82EA      		ldi r24,lo8(-94)
 213 005e 00D0      		rcall i2c_start_wait
  66:test_i2cmaster.c ****         i2c_write(0x00);                         // write address = 0
 215               	.LM25:
 216 0060 80E0      		ldi r24,0
 217 0062 00D0      		rcall i2c_write
  67:test_i2cmaster.c ****         i2c_rep_start(Dev24C02+I2C_READ);        // set device address and read mode
 219               	.LM26:
 220 0064 83EA      		ldi r24,lo8(-93)
 221 0066 00D0      		rcall i2c_rep_start
  68:test_i2cmaster.c ****         ret = i2c_readAck();                       // read one byte form address 0
 223               	.LM27:
 224 0068 00D0      		rcall i2c_readAck
  69:test_i2cmaster.c ****         ret = i2c_readAck();                       //  "    "    "    "     "    1
 226               	.LM28:
 227 006a 00D0      		rcall i2c_readAck
  70:test_i2cmaster.c ****         ret = i2c_readAck();                       //  "    "    "    "     "    2
 229               	.LM29:
 230 006c 00D0      		rcall i2c_readAck
  71:test_i2cmaster.c ****         ret = i2c_readNak();                       //  "    "    "    "     "    3
 232               	.LM30:
 233 006e 00D0      		rcall i2c_readNak
  72:test_i2cmaster.c ****         i2c_stop();                              // set stop condition = release bus
 235               	.LM31:
 236 0070 8983      		std Y+1,r24
 237 0072 00D0      		rcall i2c_stop
  73:test_i2cmaster.c ****     
  74:test_i2cmaster.c ****         PORTB = ~ret;                            // output byte on the LED's        
 239               	.LM32:
 240 0074 8981      		ldd r24,Y+1
 241 0076 8095      		com r24
 242 0078 88BB      		out 0x18,r24
 243 007a 00C0      		rjmp .L4
 245               	.Lscope1:
 247               		.stabd	78,0,0
 248               		.text
 250               	.Letext0:
 251               		.ident	"GCC: (GNU) 4.8.1"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 test_i2cmaster.c
     /tmp/cc2436zt.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc2436zt.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc2436zt.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc2436zt.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc2436zt.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc2436zt.s:106    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
i2c_init
i2c_start
i2c_stop
i2c_write
i2c_start_wait
i2c_rep_start
i2c_readNak
i2c_readAck
